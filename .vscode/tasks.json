{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Setup Git Hooks",
            "type": "shell",
            "command": "${workspaceFolder}/setup-hooks.sh",
            "runOptions": {
                "runOn": "folderOpen"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "dedicated",
                "showReuseMessage": false,
                "clear": false,
                "close": true
            },
            "problemMatcher": []
        },
        {
            "label": "Generate OpenAPI Client",
            "type": "shell",
            "command": "poetry",
            "args": [
                "run",
                "python",
                "generate_client.py"
            ],
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": false
            },
            "problemMatcher": [],
            "detail": "Generate SPAN Panel OpenAPI client from openapi.json specification",
            "icon": {
                "id": "gear",
                "color": "terminal.ansiBlue"
            },
            "runOptions": {
                "runOn": "default"
            }
        },
        {
            "label": "Install Dependencies",
            "type": "shell",
            "command": "poetry",
            "args": [
                "install"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            },
            "problemMatcher": [],
            "detail": "Install project dependencies using Poetry"
        },
        {
            "label": "Run Tests",
            "type": "shell",
            "command": "poetry",
            "args": [
                "run",
                "pytest"
            ],
            "group": {
                "kind": "test",
                "isDefault": true
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            },
            "problemMatcher": [],
            "detail": "Run the test suite using pytest"
        },
        {
            "label": "Coverage Report",
            "type": "shell",
            "command": "python",
            "args": [
                "scripts/coverage.py"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            },
            "problemMatcher": [],
            "detail": "Generate test coverage report",
            "dependsOn": "Run Tests"
        },
        {
            "label": "Format and Lint Markdown",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "poetry run format-markdown && npx markdownlint-cli2 --config .markdownlint-cli2.jsonc **/*.md"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            },
            "problemMatcher": [],
            "detail": "Format and lint all markdown files using Prettier and markdownlint"
        },
        {
            "label": "Format Code",
            "type": "shell",
            "command": "./scripts/format.sh",
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            },
            "problemMatcher": [],
            "detail": "Format code with ruff and black following the project-specific configuration"
        },
        {
            "label": "Run Pre-commit",
            "type": "shell",
            "command": "poetry",
            "args": [
                "run",
                "pre-commit",
                "run",
                "--all-files"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            },
            "problemMatcher": [],
            "detail": "Run all pre-commit hooks on all files"
        }
    ]
}