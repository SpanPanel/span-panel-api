"""
Span

Span Panel REST API

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Self

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
)
from span_panel_api_client.models.priority import Priority
from span_panel_api_client.models.relay_state import RelayState


class Circuit(BaseModel):
    """
    Circuit
    """  # noqa: E501

    id: StrictStr
    name: StrictStr | None = None
    relay_state: RelayState = Field(alias="relayState")
    instant_power_w: StrictFloat | StrictInt = Field(alias="instantPowerW")
    instant_power_update_time_s: StrictInt = Field(alias="instantPowerUpdateTimeS")
    produced_energy_wh: StrictFloat | StrictInt = Field(alias="producedEnergyWh")
    consumed_energy_wh: StrictFloat | StrictInt = Field(alias="consumedEnergyWh")
    energy_accum_update_time_s: StrictInt = Field(alias="energyAccumUpdateTimeS")
    tabs: list[StrictInt] | None = None
    priority: Priority
    is_user_controllable: StrictBool = Field(alias="isUserControllable")
    is_sheddable: StrictBool = Field(alias="isSheddable")
    is_never_backup: StrictBool = Field(alias="isNeverBackup")
    __properties: ClassVar[list[str]] = [
        "id",
        "name",
        "relayState",
        "instantPowerW",
        "instantPowerUpdateTimeS",
        "producedEnergyWh",
        "consumedEnergyWh",
        "energyAccumUpdateTimeS",
        "tabs",
        "priority",
        "isUserControllable",
        "isSheddable",
        "isNeverBackup",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of Circuit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of Circuit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "name": obj.get("name"),
                "relayState": obj.get("relayState"),
                "instantPowerW": obj.get("instantPowerW"),
                "instantPowerUpdateTimeS": obj.get("instantPowerUpdateTimeS"),
                "producedEnergyWh": obj.get("producedEnergyWh"),
                "consumedEnergyWh": obj.get("consumedEnergyWh"),
                "energyAccumUpdateTimeS": obj.get("energyAccumUpdateTimeS"),
                "tabs": obj.get("tabs"),
                "priority": obj.get("priority"),
                "isUserControllable": obj.get("isUserControllable"),
                "isSheddable": obj.get("isSheddable"),
                "isNeverBackup": obj.get("isNeverBackup"),
            }
        )
        return _obj
