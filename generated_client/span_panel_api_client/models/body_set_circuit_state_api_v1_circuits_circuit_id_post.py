"""
Span

Span Panel REST API

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field
from span_panel_api_client.models.boolean_in import BooleanIn
from span_panel_api_client.models.circuit_name_in import CircuitNameIn
from span_panel_api_client.models.priority_in import PriorityIn
from span_panel_api_client.models.relay_state_in import RelayStateIn


class BodySetCircuitStateApiV1CircuitsCircuitIdPost(BaseModel):
    """
    BodySetCircuitStateApiV1CircuitsCircuitIdPost
    """  # noqa: E501

    relay_state_in: RelayStateIn | None = Field(default=None, alias="relayStateIn")
    priority_in: PriorityIn | None = Field(default=None, alias="priorityIn")
    circuit_name_in: CircuitNameIn | None = Field(default=None, alias="circuitNameIn")
    user_controllable_in: BooleanIn | None = Field(
        default=None, alias="userControllableIn"
    )
    sheddable_in: BooleanIn | None = Field(default=None, alias="sheddableIn")
    never_backup_in: BooleanIn | None = Field(default=None, alias="neverBackupIn")
    __properties: ClassVar[list[str]] = [
        "relayStateIn",
        "priorityIn",
        "circuitNameIn",
        "userControllableIn",
        "sheddableIn",
        "neverBackupIn",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of BodySetCircuitStateApiV1CircuitsCircuitIdPost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of relay_state_in
        if self.relay_state_in:
            _dict["relayStateIn"] = self.relay_state_in.to_dict()
        # override the default output from pydantic by calling `to_dict()` of priority_in
        if self.priority_in:
            _dict["priorityIn"] = self.priority_in.to_dict()
        # override the default output from pydantic by calling `to_dict()` of circuit_name_in
        if self.circuit_name_in:
            _dict["circuitNameIn"] = self.circuit_name_in.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_controllable_in
        if self.user_controllable_in:
            _dict["userControllableIn"] = self.user_controllable_in.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sheddable_in
        if self.sheddable_in:
            _dict["sheddableIn"] = self.sheddable_in.to_dict()
        # override the default output from pydantic by calling `to_dict()` of never_backup_in
        if self.never_backup_in:
            _dict["neverBackupIn"] = self.never_backup_in.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of BodySetCircuitStateApiV1CircuitsCircuitIdPost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "relayStateIn": (
                    RelayStateIn.from_dict(obj["relayStateIn"])
                    if obj.get("relayStateIn") is not None
                    else None
                ),
                "priorityIn": (
                    PriorityIn.from_dict(obj["priorityIn"])
                    if obj.get("priorityIn") is not None
                    else None
                ),
                "circuitNameIn": (
                    CircuitNameIn.from_dict(obj["circuitNameIn"])
                    if obj.get("circuitNameIn") is not None
                    else None
                ),
                "userControllableIn": (
                    BooleanIn.from_dict(obj["userControllableIn"])
                    if obj.get("userControllableIn") is not None
                    else None
                ),
                "sheddableIn": (
                    BooleanIn.from_dict(obj["sheddableIn"])
                    if obj.get("sheddableIn") is not None
                    else None
                ),
                "neverBackupIn": (
                    BooleanIn.from_dict(obj["neverBackupIn"])
                    if obj.get("neverBackupIn") is not None
                    else None
                ),
            }
        )
        return _obj
