[tool.poetry]
name = "span-panel-api"
version = "0.1.0"
description = "A client library for SPAN Panel API"
authors = []
readme = "README.md"
packages = [
    {include = "span_panel_api", from = "src"},
]


[tool.poetry.dependencies]
python = "^3.9"
httpx = ">=0.20.0,<0.29.0"
attrs = ">=22.2.0"
python-dateutil = "^2.8.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^6.0.0"
bandit = "^1.8.0"
twine = "^5.0.0"
pre-commit = "^3.0.0"
ruff = "^0.11.0"
mypy = "^1.15.0"

[tool.poetry.group.generate.dependencies]
openapi-python-client = "^0.24.0"
pyyaml = "^6.0.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 120
exclude = [
    "src/span_panel_api/generated_client/",
    ".*_cache/",
    "dist/",
    "venv/",
    ".venv/",
]

[tool.ruff.lint]
select = ["F", "I", "UP"]

[tool.mypy]
exclude = [
    "src/span_panel_api/generated_client/",
    "tests/",
    "docs/",
    ".*_cache/",
    "dist/",
    "venv/",
    ".venv/",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "span_panel_api.generated_client.*"
follow_imports = "skip"
ignore_errors = true

[tool.coverage.run]
source = ["src/span_panel_api"]
omit = [
    "src/span_panel_api/generated_client/*",
    "tests/*",
    "*/tests/*",
    "*/.venv/*",
    "*/venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
# Security linter configuration
exclude_dirs = ["tests", "src/span_panel_api/generated_client"]
