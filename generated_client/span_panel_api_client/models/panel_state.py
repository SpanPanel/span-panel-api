"""
Span

Span Panel REST API

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from span_panel_api_client.models.branch import Branch
from span_panel_api_client.models.feedthrough_energy import FeedthroughEnergy
from span_panel_api_client.models.main_meter_energy import MainMeterEnergy
from span_panel_api_client.models.relay_state import RelayState


class PanelState(BaseModel):
    """
    PanelState
    """  # noqa: E501

    main_relay_state: RelayState = Field(alias="mainRelayState")
    main_meter_energy: MainMeterEnergy = Field(alias="mainMeterEnergy")
    instant_grid_power_w: StrictFloat | StrictInt = Field(alias="instantGridPowerW")
    feedthrough_power_w: StrictFloat | StrictInt = Field(alias="feedthroughPowerW")
    feedthrough_energy: FeedthroughEnergy = Field(alias="feedthroughEnergy")
    grid_sample_start_ms: StrictInt = Field(alias="gridSampleStartMs")
    grid_sample_end_ms: StrictInt = Field(alias="gridSampleEndMs")
    dsm_grid_state: StrictStr = Field(alias="dsmGridState")
    dsm_state: StrictStr = Field(alias="dsmState")
    current_run_config: StrictStr = Field(alias="currentRunConfig")
    branches: list[Branch]
    __properties: ClassVar[list[str]] = [
        "mainRelayState",
        "mainMeterEnergy",
        "instantGridPowerW",
        "feedthroughPowerW",
        "feedthroughEnergy",
        "gridSampleStartMs",
        "gridSampleEndMs",
        "dsmGridState",
        "dsmState",
        "currentRunConfig",
        "branches",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of PanelState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of main_meter_energy
        if self.main_meter_energy:
            _dict["mainMeterEnergy"] = self.main_meter_energy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of feedthrough_energy
        if self.feedthrough_energy:
            _dict["feedthroughEnergy"] = self.feedthrough_energy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in branches (list)
        _items = []
        if self.branches:
            for _item_branches in self.branches:
                if _item_branches:
                    _items.append(_item_branches.to_dict())
            _dict["branches"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of PanelState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "mainRelayState": obj.get("mainRelayState"),
                "mainMeterEnergy": (
                    MainMeterEnergy.from_dict(obj["mainMeterEnergy"])
                    if obj.get("mainMeterEnergy") is not None
                    else None
                ),
                "instantGridPowerW": obj.get("instantGridPowerW"),
                "feedthroughPowerW": obj.get("feedthroughPowerW"),
                "feedthroughEnergy": (
                    FeedthroughEnergy.from_dict(obj["feedthroughEnergy"])
                    if obj.get("feedthroughEnergy") is not None
                    else None
                ),
                "gridSampleStartMs": obj.get("gridSampleStartMs"),
                "gridSampleEndMs": obj.get("gridSampleEndMs"),
                "dsmGridState": obj.get("dsmGridState"),
                "dsmState": obj.get("dsmState"),
                "currentRunConfig": obj.get("currentRunConfig"),
                "branches": (
                    [Branch.from_dict(_item) for _item in obj["branches"]]
                    if obj.get("branches") is not None
                    else None
                ),
            }
        )
        return _obj
